{"/home/travis/build/npmtest/node-npmtest-postcss-smart-import/test.js":"/* istanbul instrument in package npmtest_postcss_smart_import */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-postcss-smart-import/lib.npmtest_postcss_smart_import.js":"/* istanbul instrument in package npmtest_postcss_smart_import */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_postcss_smart_import = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_postcss_smart_import = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-postcss-smart-import/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-postcss-smart-import && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_postcss_smart_import */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_postcss_smart_import\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_postcss_smart_import.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_postcss_smart_import.rollup.js'] =\n            local.assetsDict['/assets.npmtest_postcss_smart_import.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_postcss_smart_import.__dirname + '/lib.npmtest_postcss_smart_import.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-postcss-smart-import/node_modules/postcss-smart-import/lib/index.classic.commonjs.js":"/*! postcss-smart-import v0.6.12 by undefined */\n'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar _get = _interopDefault(require('lodash/get'));\nvar path = _interopDefault(require('path'));\nvar assign = _interopDefault(require('object-assign'));\nvar postcss = _interopDefault(require('postcss'));\nvar _includes = _interopDefault(require('lodash/includes'));\nvar resolveId = _interopDefault(require('resolve'));\nvar readCache = _interopDefault(require('read-cache'));\nvar valueParser = _interopDefault(require('postcss-value-parser'));\nvar promiseEach = _interopDefault(require('promise-each'));\n\nvar moduleDirectories = [\"web_modules\", \"node_modules\"];\n\nfunction resolveModule(id, opts) {\n  return new Promise(function (resolve, reject) {\n    resolveId(id, opts, function (err, path$$1) {\n      return err ? reject(err) : resolve(path$$1);\n    });\n  });\n}\n\nvar resolveId$1 = function (id, base, options) {\n  var paths = options.path,\n      resolveOpts = {\n    basedir: base,\n    moduleDirectory: moduleDirectories,\n    paths: paths,\n    extensions: [\".css\", \".sss\", \".less\", \".scss\", \".sass\"],\n    packageFilter: function (pkg) {\n      if (pkg.style) {\n        pkg.main = pkg.style;\n      } else if (pkg.browser) {\n        pkg.main = pkg.browser;\n      } else if (!pkg.main || !/\\.css$/.test(pkg.main)) {\n        pkg.main = \"index.css\";\n      }\n      return pkg;\n    }\n  };\n\n  return resolveModule(\"./\" + id, resolveOpts)[\"catch\"](function () {\n    return resolveModule(id, resolveOpts);\n  })[\"catch\"](function () {\n    if (!_includes(paths, base)) {\n      paths.unshift(base);\n    }\n\n    throw new Error([\"Failed to find '\" + id + \"'\", \"in [ \", \"    \" + paths.join(\",\\n        \"), \"]\"].join(\"\\n    \"));\n  });\n};\n\nfunction loadContent(fileName) {\n  return readCache(fileName, \"utf-8\");\n}\n\nvar stringify = valueParser.stringify;\n\nfunction parseStatements(result, styles) {\n  var statements = [],\n      nodes = [];\n\n\n  styles.each(function (node) {\n    var stmt;\n    if (\"atrule\" === node.type && \"import\" === node.name) stmt = parseImport(result, node);\n\n    if (stmt) {\n      if (0 < nodes.length) {\n        statements.push({\n          type: \"nodes\",\n          nodes: nodes\n        });\n\n        nodes = [];\n      }\n\n      statements.push(stmt);\n    } else {\n      nodes.push(node);\n    }\n  });\n\n  if (0 < nodes.length) {\n    statements.push({\n      type: \"nodes\",\n      nodes: nodes\n    });\n  }\n\n  return statements;\n}\n\nfunction parseImport(result, atRule) {\n  var prev = atRule.prev();\n  while (prev && \"comment\" === prev.type) {\n    prev = prev.prev();\n  }\n\n  if (prev) {\n    if (\"atrule\" !== prev.type || \"import\" !== prev.name && \"charset\" !== prev.name) {\n      return result.warn(\"@import must precede all other statements (besides @charset)\", { node: atRule });\n    }\n  }\n\n  if (atRule.nodes) {\n    return result.warn(\"It looks like you didn't end your @import statement correctly. Child nodes are attached to it.\", { node: atRule });\n  }\n\n  var params = valueParser(atRule.params).nodes,\n      stmt = {\n    type: \"import\",\n    node: atRule\n  };\n\n\n  if (0 === params.length || (\"string\" !== params[0].type || !params[0].value) && (\"function\" !== params[0].type || \"url\" !== params[0].value || 0 === params[0].nodes.length || !params[0].nodes[0].value)) {\n    return result.warn(\"Unable to find uri in '\" + atRule.toString() + \"'\", { node: atRule });\n  }\n\n  if (\"string\" === params[0].type) stmt.uri = params[0].value;else stmt.uri = params[0].nodes[0].value;\n\n  stmt.fullUri = stringify(params[0]);\n\n  return stmt;\n}\n\nfunction SmartImport(options) {\n  options = assign({\n    root: process.cwd(),\n    path: [],\n    skipDuplicates: true,\n    resolve: resolveId$1,\n    load: loadContent,\n    plugins: []\n  }, options);\n\n  options.root = path.resolve(options.root);\n\n  // convert string to an array of a single element\n  if (\"string\" == typeof options.path) options.path = [options.path];\n\n  if (!Array.isArray(options.path)) options.path = [];\n\n  options.path = options.path.map(function (possibleRelativePath) {\n    return path.resolve(options.root, possibleRelativePath);\n  });\n\n  return function (styles, result) {\n    var state = {\n      importedFiles: {},\n      hashFiles: {}\n    },\n        fileName = _get(styles, \"source.input.file\");\n\n    if (fileName) state.importedFiles[fileName] = {};\n\n    if (options.plugins && !Array.isArray(options.plugins)) throw new Error(\"plugins option must be an array\");\n\n    return parseStyles(result, styles, options, state, []).then(function (bundle) {\n      applyRaws(bundle);\n      applyStyles(bundle, styles);\n\n      if (\"function\" == typeof options.onImport) options.onImport(Object.keys(state.importedFiles));\n    });\n  };\n}\n\nfunction applyRaws(bundle) {\n  bundle.forEach(function (stmt, index) {\n    if (0 === index) return;\n\n    if (stmt.parent) {\n      var before = stmt.parent.node.raws.before;\n      if (\"nodes\" === stmt.type) stmt.nodes[0].raws.before = before;else stmt.node.raws.before = before;\n    } else if (\"nodes\" === stmt.type) {\n      stmt.nodes[0].raws.before = stmt.nodes[0].raws.before || \"\\n\";\n    }\n  });\n}\n\nfunction applyStyles(bundle, styles) {\n  styles.nodes = [];\n\n  bundle.forEach(function (stmt) {\n    if (\"import\" === stmt.type) {\n      stmt.node.parent = undefined;\n      styles.append(stmt.node);\n    } else if (\"media\" === stmt.type) {\n      stmt.node.parent = undefined;\n      styles.append(stmt.node);\n    } else if (\"nodes\" === stmt.type) {\n      stmt.nodes.forEach(function (node) {\n        node.parent = undefined;\n        styles.append(node);\n      });\n    }\n  });\n}\n\nfunction parseStyles(result, styles, options, state) {\n  var statements = parseStatements(result, styles);\n\n  return Promise.resolve(statements).then(promiseEach(function (stmt) {\n    // skip protocol base uri (protocol://url) or protocol-relative\n    if (\"import\" !== stmt.type || /^(?:[a-z]+:)?\\/\\//i.test(stmt.uri)) return null;else return resolveImportId(result, stmt, options, state);\n  })).then(function () {\n    var imports = [],\n        bundle = [];\n\n\n    // squash statements and their children\n    statements.forEach(function (stmt) {\n      if (\"import\" === stmt.type) {\n        if (stmt.children) {\n          stmt.children.forEach(function (child, index) {\n            if (\"import\" === child.type) imports.push(child);else bundle.push(child);\n\n            // For better output\n            if (0 === index) child.parent = stmt;\n          });\n        } else {\n          imports.push(stmt);\n        }\n      } else if (\"media\" === stmt.type || \"nodes\" === stmt.type) {\n        bundle.push(stmt);\n      }\n    });\n\n    return imports.concat(bundle);\n  });\n}\n\nfunction resolveImportId(result, stmt, options, state) {\n  var atRule = stmt.node,\n      sourceFile = _get(atRule, \"source.input.file\"),\n      base = sourceFile ? path.dirname(sourceFile) : options.root;\n\n\n  return Promise.resolve(options.resolve(stmt.uri, base, options)).then(function (resolved) {\n    if (!Array.isArray(resolved)) resolved = [resolved];\n\n    // Add dependency messages:\n    resolved.forEach(function (fileName) {\n      result.messages.push({\n        type: \"dependency\",\n        file: fileName,\n        parent: sourceFile\n      });\n    });\n\n    return Promise.all(resolved.map(function (file) {\n      return loadImportContent(result, stmt, file, options, state);\n    }));\n  }).then(function (importedContent) {\n    // Merge loaded statements\n    stmt.children = importedContent.reduce(function (currentContent, statements) {\n      if (statements) {\n        currentContent = currentContent.concat(statements);\n      }\n      return currentContent;\n    }, []);\n  })[\"catch\"](function (err) {\n    result.warn(err.message, { node: atRule });\n  });\n}\n\nfunction loadImportContent(result, stmt, filename, options, state) {\n  var atRule = stmt.node;\n  if (options.skipDuplicates) {\n    // skip files already imported at the same scope\n    if (state.importedFiles[filename]) return null;\n\n    // save imported files to skip them next time\n    state.importedFiles[filename] = true;\n  }\n\n  return Promise.resolve(options.load(filename, options)).then(function (content) {\n    if (\"function\" != typeof options.transform) {\n      return content;\n    }\n    return Promise.resolve(options.transform(content, filename, options)).then(function (transformed) {\n      return \"string\" == typeof transformed ? transformed : content;\n    });\n  }).then(function (content) {\n    if (\"\" === content.trim()) {\n      result.warn(filename + \" is empty\", { node: atRule });\n      return null;\n    }\n\n    // skip previous imported files not containing @import rules\n    if (state.hashFiles[content]) return null;\n\n    return postcss(options.plugins).process(content, {\n      from: filename,\n      syntax: result.opts.syntax,\n      parser: result.opts.parser\n    }).then(function (importedResult) {\n      var styles = importedResult.root;\n      result.messages = result.messages.concat(importedResult.messages);\n\n      if (options.skipDuplicates) {\n        var hasImport = styles.some(function (child) {\n          return \"atrule\" === child.type && \"import\" === child.name;\n        });\n\n        if (!hasImport) state.hashFiles[content] = true;\n      }\n\n      // recursion: import @import from imported file\n      return parseStyles(result, styles, options, state);\n    });\n  });\n}\n\nvar index = postcss.plugin(\"postcss-smart-import\", SmartImport);\n\nmodule.exports = index;\n//# sourceMappingURL=index.classic.commonjs.js.map\n","/home/travis/build/npmtest/node-npmtest-postcss-smart-import/node_modules/postcss-smart-import/gulpfile.babel.js":"import \"readable-code\"\n","/home/travis/build/npmtest/node-npmtest-postcss-smart-import/node_modules/postcss-smart-import/lib/index.classic.esmodule.js":"/*! postcss-smart-import v0.6.12 by undefined */\nimport _get from 'lodash/get';\nimport path from 'path';\nimport assign from 'object-assign';\nimport postcss from 'postcss';\nimport _includes from 'lodash/includes';\nimport resolveId from 'resolve';\nimport readCache from 'read-cache';\nimport valueParser from 'postcss-value-parser';\nimport promiseEach from 'promise-each';\n\nvar moduleDirectories = [\"web_modules\", \"node_modules\"];\n\nfunction resolveModule(id, opts) {\n  return new Promise(function (resolve, reject) {\n    resolveId(id, opts, function (err, path$$1) {\n      return err ? reject(err) : resolve(path$$1);\n    });\n  });\n}\n\nvar resolveId$1 = function (id, base, options) {\n  var paths = options.path,\n      resolveOpts = {\n    basedir: base,\n    moduleDirectory: moduleDirectories,\n    paths: paths,\n    extensions: [\".css\", \".sss\", \".less\", \".scss\", \".sass\"],\n    packageFilter: function (pkg) {\n      if (pkg.style) {\n        pkg.main = pkg.style;\n      } else if (pkg.browser) {\n        pkg.main = pkg.browser;\n      } else if (!pkg.main || !/\\.css$/.test(pkg.main)) {\n        pkg.main = \"index.css\";\n      }\n      return pkg;\n    }\n  };\n\n  return resolveModule(\"./\" + id, resolveOpts)[\"catch\"](function () {\n    return resolveModule(id, resolveOpts);\n  })[\"catch\"](function () {\n    if (!_includes(paths, base)) {\n      paths.unshift(base);\n    }\n\n    throw new Error([\"Failed to find '\" + id + \"'\", \"in [ \", \"    \" + paths.join(\",\\n        \"), \"]\"].join(\"\\n    \"));\n  });\n};\n\nfunction loadContent(fileName) {\n  return readCache(fileName, \"utf-8\");\n}\n\nvar stringify = valueParser.stringify;\n\nfunction parseStatements(result, styles) {\n  var statements = [],\n      nodes = [];\n\n\n  styles.each(function (node) {\n    var stmt;\n    if (\"atrule\" === node.type && \"import\" === node.name) stmt = parseImport(result, node);\n\n    if (stmt) {\n      if (0 < nodes.length) {\n        statements.push({\n          type: \"nodes\",\n          nodes: nodes\n        });\n\n        nodes = [];\n      }\n\n      statements.push(stmt);\n    } else {\n      nodes.push(node);\n    }\n  });\n\n  if (0 < nodes.length) {\n    statements.push({\n      type: \"nodes\",\n      nodes: nodes\n    });\n  }\n\n  return statements;\n}\n\nfunction parseImport(result, atRule) {\n  var prev = atRule.prev();\n  while (prev && \"comment\" === prev.type) {\n    prev = prev.prev();\n  }\n\n  if (prev) {\n    if (\"atrule\" !== prev.type || \"import\" !== prev.name && \"charset\" !== prev.name) {\n      return result.warn(\"@import must precede all other statements (besides @charset)\", { node: atRule });\n    }\n  }\n\n  if (atRule.nodes) {\n    return result.warn(\"It looks like you didn't end your @import statement correctly. Child nodes are attached to it.\", { node: atRule });\n  }\n\n  var params = valueParser(atRule.params).nodes,\n      stmt = {\n    type: \"import\",\n    node: atRule\n  };\n\n\n  if (0 === params.length || (\"string\" !== params[0].type || !params[0].value) && (\"function\" !== params[0].type || \"url\" !== params[0].value || 0 === params[0].nodes.length || !params[0].nodes[0].value)) {\n    return result.warn(\"Unable to find uri in '\" + atRule.toString() + \"'\", { node: atRule });\n  }\n\n  if (\"string\" === params[0].type) stmt.uri = params[0].value;else stmt.uri = params[0].nodes[0].value;\n\n  stmt.fullUri = stringify(params[0]);\n\n  return stmt;\n}\n\nfunction SmartImport(options) {\n  options = assign({\n    root: process.cwd(),\n    path: [],\n    skipDuplicates: true,\n    resolve: resolveId$1,\n    load: loadContent,\n    plugins: []\n  }, options);\n\n  options.root = path.resolve(options.root);\n\n  // convert string to an array of a single element\n  if (\"string\" == typeof options.path) options.path = [options.path];\n\n  if (!Array.isArray(options.path)) options.path = [];\n\n  options.path = options.path.map(function (possibleRelativePath) {\n    return path.resolve(options.root, possibleRelativePath);\n  });\n\n  return function (styles, result) {\n    var state = {\n      importedFiles: {},\n      hashFiles: {}\n    },\n        fileName = _get(styles, \"source.input.file\");\n\n    if (fileName) state.importedFiles[fileName] = {};\n\n    if (options.plugins && !Array.isArray(options.plugins)) throw new Error(\"plugins option must be an array\");\n\n    return parseStyles(result, styles, options, state, []).then(function (bundle) {\n      applyRaws(bundle);\n      applyStyles(bundle, styles);\n\n      if (\"function\" == typeof options.onImport) options.onImport(Object.keys(state.importedFiles));\n    });\n  };\n}\n\nfunction applyRaws(bundle) {\n  bundle.forEach(function (stmt, index) {\n    if (0 === index) return;\n\n    if (stmt.parent) {\n      var before = stmt.parent.node.raws.before;\n      if (\"nodes\" === stmt.type) stmt.nodes[0].raws.before = before;else stmt.node.raws.before = before;\n    } else if (\"nodes\" === stmt.type) {\n      stmt.nodes[0].raws.before = stmt.nodes[0].raws.before || \"\\n\";\n    }\n  });\n}\n\nfunction applyStyles(bundle, styles) {\n  styles.nodes = [];\n\n  bundle.forEach(function (stmt) {\n    if (\"import\" === stmt.type) {\n      stmt.node.parent = undefined;\n      styles.append(stmt.node);\n    } else if (\"media\" === stmt.type) {\n      stmt.node.parent = undefined;\n      styles.append(stmt.node);\n    } else if (\"nodes\" === stmt.type) {\n      stmt.nodes.forEach(function (node) {\n        node.parent = undefined;\n        styles.append(node);\n      });\n    }\n  });\n}\n\nfunction parseStyles(result, styles, options, state) {\n  var statements = parseStatements(result, styles);\n\n  return Promise.resolve(statements).then(promiseEach(function (stmt) {\n    // skip protocol base uri (protocol://url) or protocol-relative\n    if (\"import\" !== stmt.type || /^(?:[a-z]+:)?\\/\\//i.test(stmt.uri)) return null;else return resolveImportId(result, stmt, options, state);\n  })).then(function () {\n    var imports = [],\n        bundle = [];\n\n\n    // squash statements and their children\n    statements.forEach(function (stmt) {\n      if (\"import\" === stmt.type) {\n        if (stmt.children) {\n          stmt.children.forEach(function (child, index) {\n            if (\"import\" === child.type) imports.push(child);else bundle.push(child);\n\n            // For better output\n            if (0 === index) child.parent = stmt;\n          });\n        } else {\n          imports.push(stmt);\n        }\n      } else if (\"media\" === stmt.type || \"nodes\" === stmt.type) {\n        bundle.push(stmt);\n      }\n    });\n\n    return imports.concat(bundle);\n  });\n}\n\nfunction resolveImportId(result, stmt, options, state) {\n  var atRule = stmt.node,\n      sourceFile = _get(atRule, \"source.input.file\"),\n      base = sourceFile ? path.dirname(sourceFile) : options.root;\n\n\n  return Promise.resolve(options.resolve(stmt.uri, base, options)).then(function (resolved) {\n    if (!Array.isArray(resolved)) resolved = [resolved];\n\n    // Add dependency messages:\n    resolved.forEach(function (fileName) {\n      result.messages.push({\n        type: \"dependency\",\n        file: fileName,\n        parent: sourceFile\n      });\n    });\n\n    return Promise.all(resolved.map(function (file) {\n      return loadImportContent(result, stmt, file, options, state);\n    }));\n  }).then(function (importedContent) {\n    // Merge loaded statements\n    stmt.children = importedContent.reduce(function (currentContent, statements) {\n      if (statements) {\n        currentContent = currentContent.concat(statements);\n      }\n      return currentContent;\n    }, []);\n  })[\"catch\"](function (err) {\n    result.warn(err.message, { node: atRule });\n  });\n}\n\nfunction loadImportContent(result, stmt, filename, options, state) {\n  var atRule = stmt.node;\n  if (options.skipDuplicates) {\n    // skip files already imported at the same scope\n    if (state.importedFiles[filename]) return null;\n\n    // save imported files to skip them next time\n    state.importedFiles[filename] = true;\n  }\n\n  return Promise.resolve(options.load(filename, options)).then(function (content) {\n    if (\"function\" != typeof options.transform) {\n      return content;\n    }\n    return Promise.resolve(options.transform(content, filename, options)).then(function (transformed) {\n      return \"string\" == typeof transformed ? transformed : content;\n    });\n  }).then(function (content) {\n    if (\"\" === content.trim()) {\n      result.warn(filename + \" is empty\", { node: atRule });\n      return null;\n    }\n\n    // skip previous imported files not containing @import rules\n    if (state.hashFiles[content]) return null;\n\n    return postcss(options.plugins).process(content, {\n      from: filename,\n      syntax: result.opts.syntax,\n      parser: result.opts.parser\n    }).then(function (importedResult) {\n      var styles = importedResult.root;\n      result.messages = result.messages.concat(importedResult.messages);\n\n      if (options.skipDuplicates) {\n        var hasImport = styles.some(function (child) {\n          return \"atrule\" === child.type && \"import\" === child.name;\n        });\n\n        if (!hasImport) state.hashFiles[content] = true;\n      }\n\n      // recursion: import @import from imported file\n      return parseStyles(result, styles, options, state);\n    });\n  });\n}\n\nvar index = postcss.plugin(\"postcss-smart-import\", SmartImport);\n\nexport default index;\n//# sourceMappingURL=index.classic.esmodule.js.map\n","/home/travis/build/npmtest/node-npmtest-postcss-smart-import/node_modules/postcss-smart-import/lib/index.es2015.esmodule.js":"/*! postcss-smart-import v0.6.12 by undefined */\nimport _get from 'lodash/get';\nimport path from 'path';\nimport assign from 'object-assign';\nimport postcss from 'postcss';\nimport _includes from 'lodash/includes';\nimport resolveId from 'resolve';\nimport readCache from 'read-cache';\nimport valueParser from 'postcss-value-parser';\nimport promiseEach from 'promise-each';\n\nvar moduleDirectories = [\"web_modules\", \"node_modules\"];\n\nfunction resolveModule(id, opts) {\n  return new Promise(function (resolve, reject) {\n    resolveId(id, opts, function (err, path$$1) {\n      return err ? reject(err) : resolve(path$$1);\n    });\n  });\n}\n\nvar resolveId$1 = function (id, base, options) {\n  var paths = options.path,\n      resolveOpts = {\n    basedir: base,\n    moduleDirectory: moduleDirectories,\n    paths: paths,\n    extensions: [\".css\", \".sss\", \".less\", \".scss\", \".sass\"],\n    packageFilter: function (pkg) {\n      if (pkg.style) {\n        pkg.main = pkg.style;\n      } else if (pkg.browser) {\n        pkg.main = pkg.browser;\n      } else if (!pkg.main || !/\\.css$/.test(pkg.main)) {\n        pkg.main = \"index.css\";\n      }\n      return pkg;\n    }\n  };\n\n  return resolveModule(\"./\" + id, resolveOpts)[\"catch\"](function () {\n    return resolveModule(id, resolveOpts);\n  })[\"catch\"](function () {\n    if (!_includes(paths, base)) {\n      paths.unshift(base);\n    }\n\n    throw new Error([\"Failed to find '\" + id + \"'\", \"in [ \", \"    \" + paths.join(\",\\n        \"), \"]\"].join(\"\\n    \"));\n  });\n};\n\nfunction loadContent(fileName) {\n  return readCache(fileName, \"utf-8\");\n}\n\nvar stringify = valueParser.stringify;\n\nfunction parseStatements(result, styles) {\n  var statements = [],\n      nodes = [];\n\n\n  styles.each(function (node) {\n    var stmt;\n    if (\"atrule\" === node.type && \"import\" === node.name) stmt = parseImport(result, node);\n\n    if (stmt) {\n      if (0 < nodes.length) {\n        statements.push({\n          type: \"nodes\",\n          nodes: nodes\n        });\n\n        nodes = [];\n      }\n\n      statements.push(stmt);\n    } else {\n      nodes.push(node);\n    }\n  });\n\n  if (0 < nodes.length) {\n    statements.push({\n      type: \"nodes\",\n      nodes: nodes\n    });\n  }\n\n  return statements;\n}\n\nfunction parseImport(result, atRule) {\n  var prev = atRule.prev();\n  while (prev && \"comment\" === prev.type) {\n    prev = prev.prev();\n  }\n\n  if (prev) {\n    if (\"atrule\" !== prev.type || \"import\" !== prev.name && \"charset\" !== prev.name) {\n      return result.warn(\"@import must precede all other statements (besides @charset)\", { node: atRule });\n    }\n  }\n\n  if (atRule.nodes) {\n    return result.warn(\"It looks like you didn't end your @import statement correctly. Child nodes are attached to it.\", { node: atRule });\n  }\n\n  var params = valueParser(atRule.params).nodes,\n      stmt = {\n    type: \"import\",\n    node: atRule\n  };\n\n\n  if (0 === params.length || (\"string\" !== params[0].type || !params[0].value) && (\"function\" !== params[0].type || \"url\" !== params[0].value || 0 === params[0].nodes.length || !params[0].nodes[0].value)) {\n    return result.warn(\"Unable to find uri in '\" + atRule.toString() + \"'\", { node: atRule });\n  }\n\n  if (\"string\" === params[0].type) stmt.uri = params[0].value;else stmt.uri = params[0].nodes[0].value;\n\n  stmt.fullUri = stringify(params[0]);\n\n  return stmt;\n}\n\nfunction SmartImport(options) {\n  options = assign({\n    root: process.cwd(),\n    path: [],\n    skipDuplicates: true,\n    resolve: resolveId$1,\n    load: loadContent,\n    plugins: []\n  }, options);\n\n  options.root = path.resolve(options.root);\n\n  // convert string to an array of a single element\n  if (\"string\" == typeof options.path) options.path = [options.path];\n\n  if (!Array.isArray(options.path)) options.path = [];\n\n  options.path = options.path.map(function (possibleRelativePath) {\n    return path.resolve(options.root, possibleRelativePath);\n  });\n\n  return function (styles, result) {\n    var state = {\n      importedFiles: {},\n      hashFiles: {}\n    },\n        fileName = _get(styles, \"source.input.file\");\n\n    if (fileName) state.importedFiles[fileName] = {};\n\n    if (options.plugins && !Array.isArray(options.plugins)) throw new Error(\"plugins option must be an array\");\n\n    return parseStyles(result, styles, options, state, []).then(function (bundle) {\n      applyRaws(bundle);\n      applyStyles(bundle, styles);\n\n      if (\"function\" == typeof options.onImport) options.onImport(Object.keys(state.importedFiles));\n    });\n  };\n}\n\nfunction applyRaws(bundle) {\n  bundle.forEach(function (stmt, index) {\n    if (0 === index) return;\n\n    if (stmt.parent) {\n      var before = stmt.parent.node.raws.before;\n      if (\"nodes\" === stmt.type) stmt.nodes[0].raws.before = before;else stmt.node.raws.before = before;\n    } else if (\"nodes\" === stmt.type) {\n      stmt.nodes[0].raws.before = stmt.nodes[0].raws.before || \"\\n\";\n    }\n  });\n}\n\nfunction applyStyles(bundle, styles) {\n  styles.nodes = [];\n\n  bundle.forEach(function (stmt) {\n    if (\"import\" === stmt.type) {\n      stmt.node.parent = undefined;\n      styles.append(stmt.node);\n    } else if (\"media\" === stmt.type) {\n      stmt.node.parent = undefined;\n      styles.append(stmt.node);\n    } else if (\"nodes\" === stmt.type) {\n      stmt.nodes.forEach(function (node) {\n        node.parent = undefined;\n        styles.append(node);\n      });\n    }\n  });\n}\n\nfunction parseStyles(result, styles, options, state) {\n  var statements = parseStatements(result, styles);\n\n  return Promise.resolve(statements).then(promiseEach(function (stmt) {\n    // skip protocol base uri (protocol://url) or protocol-relative\n    if (\"import\" !== stmt.type || /^(?:[a-z]+:)?\\/\\//i.test(stmt.uri)) return null;else return resolveImportId(result, stmt, options, state);\n  })).then(function () {\n    var imports = [],\n        bundle = [];\n\n\n    // squash statements and their children\n    statements.forEach(function (stmt) {\n      if (\"import\" === stmt.type) {\n        if (stmt.children) {\n          stmt.children.forEach(function (child, index) {\n            if (\"import\" === child.type) imports.push(child);else bundle.push(child);\n\n            // For better output\n            if (0 === index) child.parent = stmt;\n          });\n        } else {\n          imports.push(stmt);\n        }\n      } else if (\"media\" === stmt.type || \"nodes\" === stmt.type) {\n        bundle.push(stmt);\n      }\n    });\n\n    return imports.concat(bundle);\n  });\n}\n\nfunction resolveImportId(result, stmt, options, state) {\n  var atRule = stmt.node,\n      sourceFile = _get(atRule, \"source.input.file\"),\n      base = sourceFile ? path.dirname(sourceFile) : options.root;\n\n\n  return Promise.resolve(options.resolve(stmt.uri, base, options)).then(function (resolved) {\n    if (!Array.isArray(resolved)) resolved = [resolved];\n\n    // Add dependency messages:\n    resolved.forEach(function (fileName) {\n      result.messages.push({\n        type: \"dependency\",\n        file: fileName,\n        parent: sourceFile\n      });\n    });\n\n    return Promise.all(resolved.map(function (file) {\n      return loadImportContent(result, stmt, file, options, state);\n    }));\n  }).then(function (importedContent) {\n    // Merge loaded statements\n    stmt.children = importedContent.reduce(function (currentContent, statements) {\n      if (statements) {\n        currentContent = currentContent.concat(statements);\n      }\n      return currentContent;\n    }, []);\n  })[\"catch\"](function (err) {\n    result.warn(err.message, { node: atRule });\n  });\n}\n\nfunction loadImportContent(result, stmt, filename, options, state) {\n  var atRule = stmt.node;\n  if (options.skipDuplicates) {\n    // skip files already imported at the same scope\n    if (state.importedFiles[filename]) return null;\n\n    // save imported files to skip them next time\n    state.importedFiles[filename] = true;\n  }\n\n  return Promise.resolve(options.load(filename, options)).then(function (content) {\n    if (\"function\" != typeof options.transform) {\n      return content;\n    }\n    return Promise.resolve(options.transform(content, filename, options)).then(function (transformed) {\n      return \"string\" == typeof transformed ? transformed : content;\n    });\n  }).then(function (content) {\n    if (\"\" === content.trim()) {\n      result.warn(filename + \" is empty\", { node: atRule });\n      return null;\n    }\n\n    // skip previous imported files not containing @import rules\n    if (state.hashFiles[content]) return null;\n\n    return postcss(options.plugins).process(content, {\n      from: filename,\n      syntax: result.opts.syntax,\n      parser: result.opts.parser\n    }).then(function (importedResult) {\n      var styles = importedResult.root;\n      result.messages = result.messages.concat(importedResult.messages);\n\n      if (options.skipDuplicates) {\n        var hasImport = styles.some(function (child) {\n          return \"atrule\" === child.type && \"import\" === child.name;\n        });\n\n        if (!hasImport) state.hashFiles[content] = true;\n      }\n\n      // recursion: import @import from imported file\n      return parseStyles(result, styles, options, state);\n    });\n  });\n}\n\nvar index = postcss.plugin(\"postcss-smart-import\", SmartImport);\n\nexport default index;\n//# sourceMappingURL=index.es2015.esmodule.js.map\n","/home/travis/build/npmtest/node-npmtest-postcss-smart-import/node_modules/postcss-smart-import/lib/index.modern.commonjs.js":"/*! postcss-smart-import v0.6.12 by undefined */\n'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar _get = _interopDefault(require('lodash/get'));\nvar path = _interopDefault(require('path'));\nvar assign = _interopDefault(require('object-assign'));\nvar postcss = _interopDefault(require('postcss'));\nvar _includes = _interopDefault(require('lodash/includes'));\nvar resolveId = _interopDefault(require('resolve'));\nvar readCache = _interopDefault(require('read-cache'));\nvar valueParser = _interopDefault(require('postcss-value-parser'));\nvar promiseEach = _interopDefault(require('promise-each'));\n\nvar moduleDirectories = [\"web_modules\", \"node_modules\"];\n\nfunction resolveModule(id, opts) {\n  return new Promise((resolve, reject) => {\n    resolveId(id, opts, (err, path$$1) => err ? reject(err) : resolve(path$$1));\n  });\n}\n\nvar resolveId$1 = function (id, base, options) {\n  var paths = options.path,\n      resolveOpts = {\n    basedir: base,\n    moduleDirectory: moduleDirectories,\n    paths: paths,\n    extensions: [\".css\", \".sss\", \".less\", \".scss\", \".sass\"],\n    packageFilter: function (pkg) {\n      if (pkg.style) {\n        pkg.main = pkg.style;\n      } else if (pkg.browser) {\n        pkg.main = pkg.browser;\n      } else if (!pkg.main || !/\\.css$/.test(pkg.main)) {\n        pkg.main = \"index.css\";\n      }\n      return pkg;\n    }\n  };\n\n  return resolveModule(\"./\" + id, resolveOpts)[\"catch\"](() => resolveModule(id, resolveOpts))[\"catch\"](() => {\n    if (!_includes(paths, base)) {\n      paths.unshift(base);\n    }\n\n    throw new Error([\"Failed to find '\" + id + \"'\", \"in [ \", \"    \" + paths.join(\",\\n        \"), \"]\"].join(\"\\n    \"));\n  });\n};\n\nfunction loadContent(fileName) {\n  return readCache(fileName, \"utf-8\");\n}\n\nvar stringify = valueParser.stringify;\n\nfunction parseStatements(result, styles) {\n  var statements = [],\n      nodes = [];\n\n\n  styles.each(node => {\n    var stmt;\n    if (\"atrule\" === node.type && \"import\" === node.name) stmt = parseImport(result, node);\n\n    if (stmt) {\n      if (0 < nodes.length) {\n        statements.push({\n          type: \"nodes\",\n          nodes: nodes\n        });\n\n        nodes = [];\n      }\n\n      statements.push(stmt);\n    } else {\n      nodes.push(node);\n    }\n  });\n\n  if (0 < nodes.length) {\n    statements.push({\n      type: \"nodes\",\n      nodes: nodes\n    });\n  }\n\n  return statements;\n}\n\nfunction parseImport(result, atRule) {\n  var prev = atRule.prev();\n  while (prev && \"comment\" === prev.type) {\n    prev = prev.prev();\n  }\n\n  if (prev) {\n    if (\"atrule\" !== prev.type || \"import\" !== prev.name && \"charset\" !== prev.name) {\n      return result.warn(\"@import must precede all other statements (besides @charset)\", { node: atRule });\n    }\n  }\n\n  if (atRule.nodes) {\n    return result.warn(\"It looks like you didn't end your @import statement correctly. Child nodes are attached to it.\", { node: atRule });\n  }\n\n  var params = valueParser(atRule.params).nodes,\n      stmt = {\n    type: \"import\",\n    node: atRule\n  };\n\n\n  if (0 === params.length || (\"string\" !== params[0].type || !params[0].value) && (\"function\" !== params[0].type || \"url\" !== params[0].value || 0 === params[0].nodes.length || !params[0].nodes[0].value)) {\n    return result.warn(\"Unable to find uri in '\" + atRule.toString() + \"'\", { node: atRule });\n  }\n\n  if (\"string\" === params[0].type) stmt.uri = params[0].value;else stmt.uri = params[0].nodes[0].value;\n\n  stmt.fullUri = stringify(params[0]);\n\n  return stmt;\n}\n\nfunction SmartImport(options) {\n  options = assign({\n    root: process.cwd(),\n    path: [],\n    skipDuplicates: true,\n    resolve: resolveId$1,\n    load: loadContent,\n    plugins: []\n  }, options);\n\n  options.root = path.resolve(options.root);\n\n  // convert string to an array of a single element\n  if (\"string\" == typeof options.path) options.path = [options.path];\n\n  if (!Array.isArray(options.path)) options.path = [];\n\n  options.path = options.path.map(possibleRelativePath => path.resolve(options.root, possibleRelativePath));\n\n  return function (styles, result) {\n    var state = {\n      importedFiles: {},\n      hashFiles: {}\n    },\n        fileName = _get(styles, \"source.input.file\");\n\n    if (fileName) state.importedFiles[fileName] = {};\n\n    if (options.plugins && !Array.isArray(options.plugins)) throw new Error(\"plugins option must be an array\");\n\n    return parseStyles(result, styles, options, state, []).then(bundle => {\n      applyRaws(bundle);\n      applyStyles(bundle, styles);\n\n      if (\"function\" == typeof options.onImport) options.onImport(Object.keys(state.importedFiles));\n    });\n  };\n}\n\nfunction applyRaws(bundle) {\n  bundle.forEach((stmt, index) => {\n    if (0 === index) return;\n\n    if (stmt.parent) {\n      var before = stmt.parent.node.raws.before;\n      if (\"nodes\" === stmt.type) stmt.nodes[0].raws.before = before;else stmt.node.raws.before = before;\n    } else if (\"nodes\" === stmt.type) {\n      stmt.nodes[0].raws.before = stmt.nodes[0].raws.before || \"\\n\";\n    }\n  });\n}\n\nfunction applyStyles(bundle, styles) {\n  styles.nodes = [];\n\n  bundle.forEach(stmt => {\n    if (\"import\" === stmt.type) {\n      stmt.node.parent = undefined;\n      styles.append(stmt.node);\n    } else if (\"media\" === stmt.type) {\n      stmt.node.parent = undefined;\n      styles.append(stmt.node);\n    } else if (\"nodes\" === stmt.type) {\n      stmt.nodes.forEach(node => {\n        node.parent = undefined;\n        styles.append(node);\n      });\n    }\n  });\n}\n\nfunction parseStyles(result, styles, options, state) {\n  var statements = parseStatements(result, styles);\n\n  return Promise.resolve(statements).then(promiseEach(stmt => {\n    // skip protocol base uri (protocol://url) or protocol-relative\n    if (\"import\" !== stmt.type || /^(?:[a-z]+:)?\\/\\//i.test(stmt.uri)) return null;else return resolveImportId(result, stmt, options, state);\n  })).then(() => {\n    var imports = [],\n        bundle = [];\n\n\n    // squash statements and their children\n    statements.forEach(stmt => {\n      if (\"import\" === stmt.type) {\n        if (stmt.children) {\n          stmt.children.forEach((child, index) => {\n            if (\"import\" === child.type) imports.push(child);else bundle.push(child);\n\n            // For better output\n            if (0 === index) child.parent = stmt;\n          });\n        } else {\n          imports.push(stmt);\n        }\n      } else if (\"media\" === stmt.type || \"nodes\" === stmt.type) {\n        bundle.push(stmt);\n      }\n    });\n\n    return imports.concat(bundle);\n  });\n}\n\nfunction resolveImportId(result, stmt, options, state) {\n  var atRule = stmt.node,\n      sourceFile = _get(atRule, \"source.input.file\"),\n      base = sourceFile ? path.dirname(sourceFile) : options.root;\n\n\n  return Promise.resolve(options.resolve(stmt.uri, base, options)).then(resolved => {\n    if (!Array.isArray(resolved)) resolved = [resolved];\n\n    // Add dependency messages:\n    resolved.forEach(fileName => {\n      result.messages.push({\n        type: \"dependency\",\n        file: fileName,\n        parent: sourceFile\n      });\n    });\n\n    return Promise.all(resolved.map(file => loadImportContent(result, stmt, file, options, state)));\n  }).then(importedContent => {\n    // Merge loaded statements\n    stmt.children = importedContent.reduce((currentContent, statements) => {\n      if (statements) {\n        currentContent = currentContent.concat(statements);\n      }\n      return currentContent;\n    }, []);\n  })[\"catch\"](err => {\n    result.warn(err.message, { node: atRule });\n  });\n}\n\nfunction loadImportContent(result, stmt, filename, options, state) {\n  var atRule = stmt.node;\n  if (options.skipDuplicates) {\n    // skip files already imported at the same scope\n    if (state.importedFiles[filename]) return null;\n\n    // save imported files to skip them next time\n    state.importedFiles[filename] = true;\n  }\n\n  return Promise.resolve(options.load(filename, options)).then(content => {\n    if (\"function\" != typeof options.transform) {\n      return content;\n    }\n    return Promise.resolve(options.transform(content, filename, options)).then(transformed => \"string\" == typeof transformed ? transformed : content);\n  }).then(content => {\n    if (\"\" === content.trim()) {\n      result.warn(filename + \" is empty\", { node: atRule });\n      return null;\n    }\n\n    // skip previous imported files not containing @import rules\n    if (state.hashFiles[content]) return null;\n\n    return postcss(options.plugins).process(content, {\n      from: filename,\n      syntax: result.opts.syntax,\n      parser: result.opts.parser\n    }).then(importedResult => {\n      var styles = importedResult.root;\n      result.messages = result.messages.concat(importedResult.messages);\n\n      if (options.skipDuplicates) {\n        var hasImport = styles.some(child => \"atrule\" === child.type && \"import\" === child.name);\n\n        if (!hasImport) state.hashFiles[content] = true;\n      }\n\n      // recursion: import @import from imported file\n      return parseStyles(result, styles, options, state);\n    });\n  });\n}\n\nvar index = postcss.plugin(\"postcss-smart-import\", SmartImport);\n\nmodule.exports = index;\n//# sourceMappingURL=index.modern.commonjs.js.map\n","/home/travis/build/npmtest/node-npmtest-postcss-smart-import/node_modules/postcss-smart-import/lib/index.modern.esmodule.js":"/*! postcss-smart-import v0.6.12 by undefined */\nimport _get from 'lodash/get';\nimport path from 'path';\nimport assign from 'object-assign';\nimport postcss from 'postcss';\nimport _includes from 'lodash/includes';\nimport resolveId from 'resolve';\nimport readCache from 'read-cache';\nimport valueParser from 'postcss-value-parser';\nimport promiseEach from 'promise-each';\n\nvar moduleDirectories = [\"web_modules\", \"node_modules\"];\n\nfunction resolveModule(id, opts) {\n  return new Promise((resolve, reject) => {\n    resolveId(id, opts, (err, path$$1) => err ? reject(err) : resolve(path$$1));\n  });\n}\n\nvar resolveId$1 = function (id, base, options) {\n  var paths = options.path,\n      resolveOpts = {\n    basedir: base,\n    moduleDirectory: moduleDirectories,\n    paths: paths,\n    extensions: [\".css\", \".sss\", \".less\", \".scss\", \".sass\"],\n    packageFilter: function (pkg) {\n      if (pkg.style) {\n        pkg.main = pkg.style;\n      } else if (pkg.browser) {\n        pkg.main = pkg.browser;\n      } else if (!pkg.main || !/\\.css$/.test(pkg.main)) {\n        pkg.main = \"index.css\";\n      }\n      return pkg;\n    }\n  };\n\n  return resolveModule(\"./\" + id, resolveOpts)[\"catch\"](() => resolveModule(id, resolveOpts))[\"catch\"](() => {\n    if (!_includes(paths, base)) {\n      paths.unshift(base);\n    }\n\n    throw new Error([\"Failed to find '\" + id + \"'\", \"in [ \", \"    \" + paths.join(\",\\n        \"), \"]\"].join(\"\\n    \"));\n  });\n};\n\nfunction loadContent(fileName) {\n  return readCache(fileName, \"utf-8\");\n}\n\nvar stringify = valueParser.stringify;\n\nfunction parseStatements(result, styles) {\n  var statements = [],\n      nodes = [];\n\n\n  styles.each(node => {\n    var stmt;\n    if (\"atrule\" === node.type && \"import\" === node.name) stmt = parseImport(result, node);\n\n    if (stmt) {\n      if (0 < nodes.length) {\n        statements.push({\n          type: \"nodes\",\n          nodes: nodes\n        });\n\n        nodes = [];\n      }\n\n      statements.push(stmt);\n    } else {\n      nodes.push(node);\n    }\n  });\n\n  if (0 < nodes.length) {\n    statements.push({\n      type: \"nodes\",\n      nodes: nodes\n    });\n  }\n\n  return statements;\n}\n\nfunction parseImport(result, atRule) {\n  var prev = atRule.prev();\n  while (prev && \"comment\" === prev.type) {\n    prev = prev.prev();\n  }\n\n  if (prev) {\n    if (\"atrule\" !== prev.type || \"import\" !== prev.name && \"charset\" !== prev.name) {\n      return result.warn(\"@import must precede all other statements (besides @charset)\", { node: atRule });\n    }\n  }\n\n  if (atRule.nodes) {\n    return result.warn(\"It looks like you didn't end your @import statement correctly. Child nodes are attached to it.\", { node: atRule });\n  }\n\n  var params = valueParser(atRule.params).nodes,\n      stmt = {\n    type: \"import\",\n    node: atRule\n  };\n\n\n  if (0 === params.length || (\"string\" !== params[0].type || !params[0].value) && (\"function\" !== params[0].type || \"url\" !== params[0].value || 0 === params[0].nodes.length || !params[0].nodes[0].value)) {\n    return result.warn(\"Unable to find uri in '\" + atRule.toString() + \"'\", { node: atRule });\n  }\n\n  if (\"string\" === params[0].type) stmt.uri = params[0].value;else stmt.uri = params[0].nodes[0].value;\n\n  stmt.fullUri = stringify(params[0]);\n\n  return stmt;\n}\n\nfunction SmartImport(options) {\n  options = assign({\n    root: process.cwd(),\n    path: [],\n    skipDuplicates: true,\n    resolve: resolveId$1,\n    load: loadContent,\n    plugins: []\n  }, options);\n\n  options.root = path.resolve(options.root);\n\n  // convert string to an array of a single element\n  if (\"string\" == typeof options.path) options.path = [options.path];\n\n  if (!Array.isArray(options.path)) options.path = [];\n\n  options.path = options.path.map(possibleRelativePath => path.resolve(options.root, possibleRelativePath));\n\n  return function (styles, result) {\n    var state = {\n      importedFiles: {},\n      hashFiles: {}\n    },\n        fileName = _get(styles, \"source.input.file\");\n\n    if (fileName) state.importedFiles[fileName] = {};\n\n    if (options.plugins && !Array.isArray(options.plugins)) throw new Error(\"plugins option must be an array\");\n\n    return parseStyles(result, styles, options, state, []).then(bundle => {\n      applyRaws(bundle);\n      applyStyles(bundle, styles);\n\n      if (\"function\" == typeof options.onImport) options.onImport(Object.keys(state.importedFiles));\n    });\n  };\n}\n\nfunction applyRaws(bundle) {\n  bundle.forEach((stmt, index) => {\n    if (0 === index) return;\n\n    if (stmt.parent) {\n      var before = stmt.parent.node.raws.before;\n      if (\"nodes\" === stmt.type) stmt.nodes[0].raws.before = before;else stmt.node.raws.before = before;\n    } else if (\"nodes\" === stmt.type) {\n      stmt.nodes[0].raws.before = stmt.nodes[0].raws.before || \"\\n\";\n    }\n  });\n}\n\nfunction applyStyles(bundle, styles) {\n  styles.nodes = [];\n\n  bundle.forEach(stmt => {\n    if (\"import\" === stmt.type) {\n      stmt.node.parent = undefined;\n      styles.append(stmt.node);\n    } else if (\"media\" === stmt.type) {\n      stmt.node.parent = undefined;\n      styles.append(stmt.node);\n    } else if (\"nodes\" === stmt.type) {\n      stmt.nodes.forEach(node => {\n        node.parent = undefined;\n        styles.append(node);\n      });\n    }\n  });\n}\n\nfunction parseStyles(result, styles, options, state) {\n  var statements = parseStatements(result, styles);\n\n  return Promise.resolve(statements).then(promiseEach(stmt => {\n    // skip protocol base uri (protocol://url) or protocol-relative\n    if (\"import\" !== stmt.type || /^(?:[a-z]+:)?\\/\\//i.test(stmt.uri)) return null;else return resolveImportId(result, stmt, options, state);\n  })).then(() => {\n    var imports = [],\n        bundle = [];\n\n\n    // squash statements and their children\n    statements.forEach(stmt => {\n      if (\"import\" === stmt.type) {\n        if (stmt.children) {\n          stmt.children.forEach((child, index) => {\n            if (\"import\" === child.type) imports.push(child);else bundle.push(child);\n\n            // For better output\n            if (0 === index) child.parent = stmt;\n          });\n        } else {\n          imports.push(stmt);\n        }\n      } else if (\"media\" === stmt.type || \"nodes\" === stmt.type) {\n        bundle.push(stmt);\n      }\n    });\n\n    return imports.concat(bundle);\n  });\n}\n\nfunction resolveImportId(result, stmt, options, state) {\n  var atRule = stmt.node,\n      sourceFile = _get(atRule, \"source.input.file\"),\n      base = sourceFile ? path.dirname(sourceFile) : options.root;\n\n\n  return Promise.resolve(options.resolve(stmt.uri, base, options)).then(resolved => {\n    if (!Array.isArray(resolved)) resolved = [resolved];\n\n    // Add dependency messages:\n    resolved.forEach(fileName => {\n      result.messages.push({\n        type: \"dependency\",\n        file: fileName,\n        parent: sourceFile\n      });\n    });\n\n    return Promise.all(resolved.map(file => loadImportContent(result, stmt, file, options, state)));\n  }).then(importedContent => {\n    // Merge loaded statements\n    stmt.children = importedContent.reduce((currentContent, statements) => {\n      if (statements) {\n        currentContent = currentContent.concat(statements);\n      }\n      return currentContent;\n    }, []);\n  })[\"catch\"](err => {\n    result.warn(err.message, { node: atRule });\n  });\n}\n\nfunction loadImportContent(result, stmt, filename, options, state) {\n  var atRule = stmt.node;\n  if (options.skipDuplicates) {\n    // skip files already imported at the same scope\n    if (state.importedFiles[filename]) return null;\n\n    // save imported files to skip them next time\n    state.importedFiles[filename] = true;\n  }\n\n  return Promise.resolve(options.load(filename, options)).then(content => {\n    if (\"function\" != typeof options.transform) {\n      return content;\n    }\n    return Promise.resolve(options.transform(content, filename, options)).then(transformed => \"string\" == typeof transformed ? transformed : content);\n  }).then(content => {\n    if (\"\" === content.trim()) {\n      result.warn(filename + \" is empty\", { node: atRule });\n      return null;\n    }\n\n    // skip previous imported files not containing @import rules\n    if (state.hashFiles[content]) return null;\n\n    return postcss(options.plugins).process(content, {\n      from: filename,\n      syntax: result.opts.syntax,\n      parser: result.opts.parser\n    }).then(importedResult => {\n      var styles = importedResult.root;\n      result.messages = result.messages.concat(importedResult.messages);\n\n      if (options.skipDuplicates) {\n        var hasImport = styles.some(child => \"atrule\" === child.type && \"import\" === child.name);\n\n        if (!hasImport) state.hashFiles[content] = true;\n      }\n\n      // recursion: import @import from imported file\n      return parseStyles(result, styles, options, state);\n    });\n  });\n}\n\nvar index = postcss.plugin(\"postcss-smart-import\", SmartImport);\n\nexport default index;\n//# sourceMappingURL=index.modern.esmodule.js.map\n"}